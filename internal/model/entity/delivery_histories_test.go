// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeliveryHistories(t *testing.T) {
	t.Parallel()

	query := DeliveryHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeliveryHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveryHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeliveryHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveryHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeliveryHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveryHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeliveryHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DeliveryHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeliveryHistoryExists to return true, but got false.")
	}
}

func testDeliveryHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deliveryHistoryFound, err := FindDeliveryHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deliveryHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeliveryHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeliveryHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeliveryHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeliveryHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeliveryHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deliveryHistoryOne := &DeliveryHistory{}
	deliveryHistoryTwo := &DeliveryHistory{}
	if err = randomize.Struct(seed, deliveryHistoryOne, deliveryHistoryDBTypes, false, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, deliveryHistoryTwo, deliveryHistoryDBTypes, false, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deliveryHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deliveryHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeliveryHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeliveryHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deliveryHistoryOne := &DeliveryHistory{}
	deliveryHistoryTwo := &DeliveryHistory{}
	if err = randomize.Struct(seed, deliveryHistoryOne, deliveryHistoryDBTypes, false, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, deliveryHistoryTwo, deliveryHistoryDBTypes, false, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deliveryHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deliveryHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deliveryHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func deliveryHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func deliveryHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func deliveryHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func deliveryHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func deliveryHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func deliveryHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func deliveryHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func deliveryHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliveryHistory) error {
	*o = DeliveryHistory{}
	return nil
}

func testDeliveryHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeliveryHistory{}
	o := &DeliveryHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory object: %s", err)
	}

	AddDeliveryHistoryHook(boil.BeforeInsertHook, deliveryHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryBeforeInsertHooks = []DeliveryHistoryHook{}

	AddDeliveryHistoryHook(boil.AfterInsertHook, deliveryHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryAfterInsertHooks = []DeliveryHistoryHook{}

	AddDeliveryHistoryHook(boil.AfterSelectHook, deliveryHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryAfterSelectHooks = []DeliveryHistoryHook{}

	AddDeliveryHistoryHook(boil.BeforeUpdateHook, deliveryHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryBeforeUpdateHooks = []DeliveryHistoryHook{}

	AddDeliveryHistoryHook(boil.AfterUpdateHook, deliveryHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryAfterUpdateHooks = []DeliveryHistoryHook{}

	AddDeliveryHistoryHook(boil.BeforeDeleteHook, deliveryHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryBeforeDeleteHooks = []DeliveryHistoryHook{}

	AddDeliveryHistoryHook(boil.AfterDeleteHook, deliveryHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryAfterDeleteHooks = []DeliveryHistoryHook{}

	AddDeliveryHistoryHook(boil.BeforeUpsertHook, deliveryHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryBeforeUpsertHooks = []DeliveryHistoryHook{}

	AddDeliveryHistoryHook(boil.AfterUpsertHook, deliveryHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deliveryHistoryAfterUpsertHooks = []DeliveryHistoryHook{}
}

func testDeliveryHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeliveryHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deliveryHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeliveryHistoryToOneDeliveryUsingDelivery(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeliveryHistory
	var foreign Delivery

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deliveryHistoryDBTypes, false, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DeliveryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Delivery().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDeliveryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeliveryHistorySlice{&local}
	if err = local.L.LoadDelivery(ctx, tx, false, (*[]*DeliveryHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Delivery = nil
	if err = local.L.LoadDelivery(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeliveryHistoryToOneSetOpDeliveryUsingDelivery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeliveryHistory
	var b, c Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deliveryHistoryDBTypes, false, strmangle.SetComplement(deliveryHistoryPrimaryKeyColumns, deliveryHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Delivery{&b, &c} {
		err = a.SetDelivery(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Delivery != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeliveryHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DeliveryID, x.ID) {
			t.Error("foreign key was wrong value", a.DeliveryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeliveryID))
		reflect.Indirect(reflect.ValueOf(&a.DeliveryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DeliveryID, x.ID) {
			t.Error("foreign key was wrong value", a.DeliveryID, x.ID)
		}
	}
}

func testDeliveryHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeliveryHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeliveryHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeliveryHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeliveryHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deliveryHistoryDBTypes = map[string]string{`ID`: `text`, `DeliveryID`: `text`, `Status`: `text`, `CreatedAt`: `timestamp with time zone`}
	_                      = bytes.MinRead
)

func testDeliveryHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deliveryHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deliveryHistoryAllColumns) == len(deliveryHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeliveryHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deliveryHistoryAllColumns) == len(deliveryHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeliveryHistory{}
	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deliveryHistoryDBTypes, true, deliveryHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deliveryHistoryAllColumns, deliveryHistoryPrimaryKeyColumns) {
		fields = deliveryHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			deliveryHistoryAllColumns,
			deliveryHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeliveryHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeliveryHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(deliveryHistoryAllColumns) == len(deliveryHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeliveryHistory{}
	if err = randomize.Struct(seed, &o, deliveryHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeliveryHistory: %s", err)
	}

	count, err := DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deliveryHistoryDBTypes, false, deliveryHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliveryHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeliveryHistory: %s", err)
	}

	count, err = DeliveryHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
