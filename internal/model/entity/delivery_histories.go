// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeliveryHistory is an object representing the database table.
type DeliveryHistory struct {
	ID         null.String `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeliveryID null.String `boil:"delivery_id" json:"delivery_id" toml:"delivery_id" yaml:"delivery_id"`
	Status     null.String `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *deliveryHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryHistoryColumns = struct {
	ID         string
	DeliveryID string
	Status     string
	CreatedAt  string
}{
	ID:         "id",
	DeliveryID: "delivery_id",
	Status:     "status",
	CreatedAt:  "created_at",
}

var DeliveryHistoryTableColumns = struct {
	ID         string
	DeliveryID string
	Status     string
	CreatedAt  string
}{
	ID:         "delivery_histories.id",
	DeliveryID: "delivery_histories.delivery_id",
	Status:     "delivery_histories.status",
	CreatedAt:  "delivery_histories.created_at",
}

// Generated where

var DeliveryHistoryWhere = struct {
	ID         whereHelpernull_String
	DeliveryID whereHelpernull_String
	Status     whereHelpernull_String
	CreatedAt  whereHelpernull_Time
}{
	ID:         whereHelpernull_String{field: "\"delivery_histories\".\"id\""},
	DeliveryID: whereHelpernull_String{field: "\"delivery_histories\".\"delivery_id\""},
	Status:     whereHelpernull_String{field: "\"delivery_histories\".\"status\""},
	CreatedAt:  whereHelpernull_Time{field: "\"delivery_histories\".\"created_at\""},
}

// DeliveryHistoryRels is where relationship names are stored.
var DeliveryHistoryRels = struct {
	Delivery string
}{
	Delivery: "Delivery",
}

// deliveryHistoryR is where relationships are stored.
type deliveryHistoryR struct {
	Delivery *Delivery `boil:"Delivery" json:"Delivery" toml:"Delivery" yaml:"Delivery"`
}

// NewStruct creates a new relationship struct
func (*deliveryHistoryR) NewStruct() *deliveryHistoryR {
	return &deliveryHistoryR{}
}

func (r *deliveryHistoryR) GetDelivery() *Delivery {
	if r == nil {
		return nil
	}
	return r.Delivery
}

// deliveryHistoryL is where Load methods for each relationship are stored.
type deliveryHistoryL struct{}

var (
	deliveryHistoryAllColumns            = []string{"id", "delivery_id", "status", "created_at"}
	deliveryHistoryColumnsWithoutDefault = []string{"id", "delivery_id", "status"}
	deliveryHistoryColumnsWithDefault    = []string{"created_at"}
	deliveryHistoryPrimaryKeyColumns     = []string{"id"}
	deliveryHistoryGeneratedColumns      = []string{}
)

type (
	// DeliveryHistorySlice is an alias for a slice of pointers to DeliveryHistory.
	// This should almost always be used instead of []DeliveryHistory.
	DeliveryHistorySlice []*DeliveryHistory
	// DeliveryHistoryHook is the signature for custom DeliveryHistory hook methods
	DeliveryHistoryHook func(context.Context, boil.ContextExecutor, *DeliveryHistory) error

	deliveryHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryHistoryType                 = reflect.TypeOf(&DeliveryHistory{})
	deliveryHistoryMapping              = queries.MakeStructMapping(deliveryHistoryType)
	deliveryHistoryPrimaryKeyMapping, _ = queries.BindMapping(deliveryHistoryType, deliveryHistoryMapping, deliveryHistoryPrimaryKeyColumns)
	deliveryHistoryInsertCacheMut       sync.RWMutex
	deliveryHistoryInsertCache          = make(map[string]insertCache)
	deliveryHistoryUpdateCacheMut       sync.RWMutex
	deliveryHistoryUpdateCache          = make(map[string]updateCache)
	deliveryHistoryUpsertCacheMut       sync.RWMutex
	deliveryHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deliveryHistoryAfterSelectHooks []DeliveryHistoryHook

var deliveryHistoryBeforeInsertHooks []DeliveryHistoryHook
var deliveryHistoryAfterInsertHooks []DeliveryHistoryHook

var deliveryHistoryBeforeUpdateHooks []DeliveryHistoryHook
var deliveryHistoryAfterUpdateHooks []DeliveryHistoryHook

var deliveryHistoryBeforeDeleteHooks []DeliveryHistoryHook
var deliveryHistoryAfterDeleteHooks []DeliveryHistoryHook

var deliveryHistoryBeforeUpsertHooks []DeliveryHistoryHook
var deliveryHistoryAfterUpsertHooks []DeliveryHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeliveryHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeliveryHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeliveryHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeliveryHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeliveryHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeliveryHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeliveryHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeliveryHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeliveryHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeliveryHistoryHook registers your hook function for all future operations.
func AddDeliveryHistoryHook(hookPoint boil.HookPoint, deliveryHistoryHook DeliveryHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deliveryHistoryAfterSelectHooks = append(deliveryHistoryAfterSelectHooks, deliveryHistoryHook)
	case boil.BeforeInsertHook:
		deliveryHistoryBeforeInsertHooks = append(deliveryHistoryBeforeInsertHooks, deliveryHistoryHook)
	case boil.AfterInsertHook:
		deliveryHistoryAfterInsertHooks = append(deliveryHistoryAfterInsertHooks, deliveryHistoryHook)
	case boil.BeforeUpdateHook:
		deliveryHistoryBeforeUpdateHooks = append(deliveryHistoryBeforeUpdateHooks, deliveryHistoryHook)
	case boil.AfterUpdateHook:
		deliveryHistoryAfterUpdateHooks = append(deliveryHistoryAfterUpdateHooks, deliveryHistoryHook)
	case boil.BeforeDeleteHook:
		deliveryHistoryBeforeDeleteHooks = append(deliveryHistoryBeforeDeleteHooks, deliveryHistoryHook)
	case boil.AfterDeleteHook:
		deliveryHistoryAfterDeleteHooks = append(deliveryHistoryAfterDeleteHooks, deliveryHistoryHook)
	case boil.BeforeUpsertHook:
		deliveryHistoryBeforeUpsertHooks = append(deliveryHistoryBeforeUpsertHooks, deliveryHistoryHook)
	case boil.AfterUpsertHook:
		deliveryHistoryAfterUpsertHooks = append(deliveryHistoryAfterUpsertHooks, deliveryHistoryHook)
	}
}

// One returns a single deliveryHistory record from the query.
func (q deliveryHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeliveryHistory, error) {
	o := &DeliveryHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for delivery_histories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeliveryHistory records from the query.
func (q deliveryHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliveryHistorySlice, error) {
	var o []*DeliveryHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to DeliveryHistory slice")
	}

	if len(deliveryHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeliveryHistory records in the query.
func (q deliveryHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count delivery_histories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deliveryHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if delivery_histories exists")
	}

	return count > 0, nil
}

// Delivery pointed to by the foreign key.
func (o *DeliveryHistory) Delivery(mods ...qm.QueryMod) deliveryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeliveryID),
	}

	queryMods = append(queryMods, mods...)

	return Deliveries(queryMods...)
}

// LoadDelivery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryHistoryL) LoadDelivery(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryHistory interface{}, mods queries.Applicator) error {
	var slice []*DeliveryHistory
	var object *DeliveryHistory

	if singular {
		var ok bool
		object, ok = maybeDeliveryHistory.(*DeliveryHistory)
		if !ok {
			object = new(DeliveryHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryHistory))
			}
		}
	} else {
		s, ok := maybeDeliveryHistory.(*[]*DeliveryHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deliveryHistoryR{}
		}
		if !queries.IsNil(object.DeliveryID) {
			args = append(args, object.DeliveryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DeliveryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DeliveryID) {
				args = append(args, obj.DeliveryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Delivery")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Delivery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Delivery = foreign
		if foreign.R == nil {
			foreign.R = &deliveryR{}
		}
		foreign.R.DeliveryHistories = append(foreign.R.DeliveryHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DeliveryID, foreign.ID) {
				local.R.Delivery = foreign
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.DeliveryHistories = append(foreign.R.DeliveryHistories, local)
				break
			}
		}
	}

	return nil
}

// SetDelivery of the deliveryHistory to the related item.
// Sets o.R.Delivery to related.
// Adds o to related.R.DeliveryHistories.
func (o *DeliveryHistory) SetDelivery(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Delivery) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"delivery_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"delivery_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DeliveryID, related.ID)
	if o.R == nil {
		o.R = &deliveryHistoryR{
			Delivery: related,
		}
	} else {
		o.R.Delivery = related
	}

	if related.R == nil {
		related.R = &deliveryR{
			DeliveryHistories: DeliveryHistorySlice{o},
		}
	} else {
		related.R.DeliveryHistories = append(related.R.DeliveryHistories, o)
	}

	return nil
}

// DeliveryHistories retrieves all the records using an executor.
func DeliveryHistories(mods ...qm.QueryMod) deliveryHistoryQuery {
	mods = append(mods, qm.From("\"delivery_histories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"delivery_histories\".*"})
	}

	return deliveryHistoryQuery{q}
}

// FindDeliveryHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeliveryHistory(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*DeliveryHistory, error) {
	deliveryHistoryObj := &DeliveryHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"delivery_histories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliveryHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from delivery_histories")
	}

	if err = deliveryHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deliveryHistoryObj, err
	}

	return deliveryHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeliveryHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no delivery_histories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryHistoryInsertCacheMut.RLock()
	cache, cached := deliveryHistoryInsertCache[key]
	deliveryHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryHistoryAllColumns,
			deliveryHistoryColumnsWithDefault,
			deliveryHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deliveryHistoryType, deliveryHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryHistoryType, deliveryHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"delivery_histories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"delivery_histories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into delivery_histories")
	}

	if !cached {
		deliveryHistoryInsertCacheMut.Lock()
		deliveryHistoryInsertCache[key] = cache
		deliveryHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeliveryHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeliveryHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deliveryHistoryUpdateCacheMut.RLock()
	cache, cached := deliveryHistoryUpdateCache[key]
	deliveryHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryHistoryAllColumns,
			deliveryHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update delivery_histories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"delivery_histories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryHistoryType, deliveryHistoryMapping, append(wl, deliveryHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update delivery_histories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for delivery_histories")
	}

	if !cached {
		deliveryHistoryUpdateCacheMut.Lock()
		deliveryHistoryUpdateCache[key] = cache
		deliveryHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for delivery_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for delivery_histories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliveryHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"delivery_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in deliveryHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all deliveryHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeliveryHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no delivery_histories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryHistoryUpsertCacheMut.RLock()
	cache, cached := deliveryHistoryUpsertCache[key]
	deliveryHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deliveryHistoryAllColumns,
			deliveryHistoryColumnsWithDefault,
			deliveryHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryHistoryAllColumns,
			deliveryHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert delivery_histories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deliveryHistoryPrimaryKeyColumns))
			copy(conflict, deliveryHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"delivery_histories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deliveryHistoryType, deliveryHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryHistoryType, deliveryHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert delivery_histories")
	}

	if !cached {
		deliveryHistoryUpsertCacheMut.Lock()
		deliveryHistoryUpsertCache[key] = cache
		deliveryHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeliveryHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeliveryHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no DeliveryHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"delivery_histories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from delivery_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for delivery_histories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deliveryHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no deliveryHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from delivery_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for delivery_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliveryHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deliveryHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"delivery_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from deliveryHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for delivery_histories")
	}

	if len(deliveryHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeliveryHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeliveryHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliveryHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliveryHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"delivery_histories\".* FROM \"delivery_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in DeliveryHistorySlice")
	}

	*o = slice

	return nil
}

// DeliveryHistoryExists checks if the DeliveryHistory row exists.
func DeliveryHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"delivery_histories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if delivery_histories exists")
	}

	return exists, nil
}

// Exists checks if the DeliveryHistory row exists.
func (o *DeliveryHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeliveryHistoryExists(ctx, exec, o.ID)
}
