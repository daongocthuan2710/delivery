// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// District is an object representing the database table.
type District struct {
	ID         null.Int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       null.String `boil:"name" json:"name" toml:"name" yaml:"name"`
	ProvinceID null.Int    `boil:"province_id" json:"province_id" toml:"province_id" yaml:"province_id"`
	GHNID      null.Int    `boil:"ghn_id" json:"ghn_id,omitempty" toml:"ghn_id" yaml:"ghn_id,omitempty"`
	GHNCode    null.String `boil:"ghn_code" json:"ghn_code,omitempty" toml:"ghn_code" yaml:"ghn_code,omitempty"`

	R *districtR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L districtL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DistrictColumns = struct {
	ID         string
	Name       string
	ProvinceID string
	GHNID      string
	GHNCode    string
}{
	ID:         "id",
	Name:       "name",
	ProvinceID: "province_id",
	GHNID:      "ghn_id",
	GHNCode:    "ghn_code",
}

var DistrictTableColumns = struct {
	ID         string
	Name       string
	ProvinceID string
	GHNID      string
	GHNCode    string
}{
	ID:         "districts.id",
	Name:       "districts.name",
	ProvinceID: "districts.province_id",
	GHNID:      "districts.ghn_id",
	GHNCode:    "districts.ghn_code",
}

// Generated where

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DistrictWhere = struct {
	ID         whereHelpernull_Int
	Name       whereHelpernull_String
	ProvinceID whereHelpernull_Int
	GHNID      whereHelpernull_Int
	GHNCode    whereHelpernull_String
}{
	ID:         whereHelpernull_Int{field: "\"districts\".\"id\""},
	Name:       whereHelpernull_String{field: "\"districts\".\"name\""},
	ProvinceID: whereHelpernull_Int{field: "\"districts\".\"province_id\""},
	GHNID:      whereHelpernull_Int{field: "\"districts\".\"ghn_id\""},
	GHNCode:    whereHelpernull_String{field: "\"districts\".\"ghn_code\""},
}

// DistrictRels is where relationship names are stored.
var DistrictRels = struct {
	Province string
	Wards    string
}{
	Province: "Province",
	Wards:    "Wards",
}

// districtR is where relationships are stored.
type districtR struct {
	Province *Province `boil:"Province" json:"Province" toml:"Province" yaml:"Province"`
	Wards    WardSlice `boil:"Wards" json:"Wards" toml:"Wards" yaml:"Wards"`
}

// NewStruct creates a new relationship struct
func (*districtR) NewStruct() *districtR {
	return &districtR{}
}

func (r *districtR) GetProvince() *Province {
	if r == nil {
		return nil
	}
	return r.Province
}

func (r *districtR) GetWards() WardSlice {
	if r == nil {
		return nil
	}
	return r.Wards
}

// districtL is where Load methods for each relationship are stored.
type districtL struct{}

var (
	districtAllColumns            = []string{"id", "name", "province_id", "ghn_id", "ghn_code"}
	districtColumnsWithoutDefault = []string{"id", "name", "province_id"}
	districtColumnsWithDefault    = []string{"ghn_id", "ghn_code"}
	districtPrimaryKeyColumns     = []string{"id"}
	districtGeneratedColumns      = []string{}
)

type (
	// DistrictSlice is an alias for a slice of pointers to District.
	// This should almost always be used instead of []District.
	DistrictSlice []*District
	// DistrictHook is the signature for custom District hook methods
	DistrictHook func(context.Context, boil.ContextExecutor, *District) error

	districtQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	districtType                 = reflect.TypeOf(&District{})
	districtMapping              = queries.MakeStructMapping(districtType)
	districtPrimaryKeyMapping, _ = queries.BindMapping(districtType, districtMapping, districtPrimaryKeyColumns)
	districtInsertCacheMut       sync.RWMutex
	districtInsertCache          = make(map[string]insertCache)
	districtUpdateCacheMut       sync.RWMutex
	districtUpdateCache          = make(map[string]updateCache)
	districtUpsertCacheMut       sync.RWMutex
	districtUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var districtAfterSelectHooks []DistrictHook

var districtBeforeInsertHooks []DistrictHook
var districtAfterInsertHooks []DistrictHook

var districtBeforeUpdateHooks []DistrictHook
var districtAfterUpdateHooks []DistrictHook

var districtBeforeDeleteHooks []DistrictHook
var districtAfterDeleteHooks []DistrictHook

var districtBeforeUpsertHooks []DistrictHook
var districtAfterUpsertHooks []DistrictHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *District) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *District) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *District) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *District) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *District) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *District) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *District) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *District) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *District) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDistrictHook registers your hook function for all future operations.
func AddDistrictHook(hookPoint boil.HookPoint, districtHook DistrictHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		districtAfterSelectHooks = append(districtAfterSelectHooks, districtHook)
	case boil.BeforeInsertHook:
		districtBeforeInsertHooks = append(districtBeforeInsertHooks, districtHook)
	case boil.AfterInsertHook:
		districtAfterInsertHooks = append(districtAfterInsertHooks, districtHook)
	case boil.BeforeUpdateHook:
		districtBeforeUpdateHooks = append(districtBeforeUpdateHooks, districtHook)
	case boil.AfterUpdateHook:
		districtAfterUpdateHooks = append(districtAfterUpdateHooks, districtHook)
	case boil.BeforeDeleteHook:
		districtBeforeDeleteHooks = append(districtBeforeDeleteHooks, districtHook)
	case boil.AfterDeleteHook:
		districtAfterDeleteHooks = append(districtAfterDeleteHooks, districtHook)
	case boil.BeforeUpsertHook:
		districtBeforeUpsertHooks = append(districtBeforeUpsertHooks, districtHook)
	case boil.AfterUpsertHook:
		districtAfterUpsertHooks = append(districtAfterUpsertHooks, districtHook)
	}
}

// One returns a single district record from the query.
func (q districtQuery) One(ctx context.Context, exec boil.ContextExecutor) (*District, error) {
	o := &District{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for districts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all District records from the query.
func (q districtQuery) All(ctx context.Context, exec boil.ContextExecutor) (DistrictSlice, error) {
	var o []*District

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to District slice")
	}

	if len(districtAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all District records in the query.
func (q districtQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count districts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q districtQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if districts exists")
	}

	return count > 0, nil
}

// Province pointed to by the foreign key.
func (o *District) Province(mods ...qm.QueryMod) provinceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProvinceID),
	}

	queryMods = append(queryMods, mods...)

	return Provinces(queryMods...)
}

// Wards retrieves all the ward's Wards with an executor.
func (o *District) Wards(mods ...qm.QueryMod) wardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"wards\".\"district_id\"=?", o.ID),
	)

	return Wards(queryMods...)
}

// LoadProvince allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (districtL) LoadProvince(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDistrict interface{}, mods queries.Applicator) error {
	var slice []*District
	var object *District

	if singular {
		var ok bool
		object, ok = maybeDistrict.(*District)
		if !ok {
			object = new(District)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDistrict)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDistrict))
			}
		}
	} else {
		s, ok := maybeDistrict.(*[]*District)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDistrict)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDistrict))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &districtR{}
		}
		if !queries.IsNil(object.ProvinceID) {
			args = append(args, object.ProvinceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &districtR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProvinceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProvinceID) {
				args = append(args, obj.ProvinceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provinces`),
		qm.WhereIn(`provinces.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Province")
	}

	var resultSlice []*Province
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Province")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for provinces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provinces")
	}

	if len(provinceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Province = foreign
		if foreign.R == nil {
			foreign.R = &provinceR{}
		}
		foreign.R.Districts = append(foreign.R.Districts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProvinceID, foreign.ID) {
				local.R.Province = foreign
				if foreign.R == nil {
					foreign.R = &provinceR{}
				}
				foreign.R.Districts = append(foreign.R.Districts, local)
				break
			}
		}
	}

	return nil
}

// LoadWards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (districtL) LoadWards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDistrict interface{}, mods queries.Applicator) error {
	var slice []*District
	var object *District

	if singular {
		var ok bool
		object, ok = maybeDistrict.(*District)
		if !ok {
			object = new(District)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDistrict)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDistrict))
			}
		}
	} else {
		s, ok := maybeDistrict.(*[]*District)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDistrict)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDistrict))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &districtR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &districtR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`wards`),
		qm.WhereIn(`wards.district_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load wards")
	}

	var resultSlice []*Ward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice wards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on wards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for wards")
	}

	if len(wardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Wards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &wardR{}
			}
			foreign.R.District = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DistrictID) {
				local.R.Wards = append(local.R.Wards, foreign)
				if foreign.R == nil {
					foreign.R = &wardR{}
				}
				foreign.R.District = local
				break
			}
		}
	}

	return nil
}

// SetProvince of the district to the related item.
// Sets o.R.Province to related.
// Adds o to related.R.Districts.
func (o *District) SetProvince(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Province) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"districts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"province_id"}),
		strmangle.WhereClause("\"", "\"", 2, districtPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProvinceID, related.ID)
	if o.R == nil {
		o.R = &districtR{
			Province: related,
		}
	} else {
		o.R.Province = related
	}

	if related.R == nil {
		related.R = &provinceR{
			Districts: DistrictSlice{o},
		}
	} else {
		related.R.Districts = append(related.R.Districts, o)
	}

	return nil
}

// AddWards adds the given related objects to the existing relationships
// of the district, optionally inserting them as new records.
// Appends related to o.R.Wards.
// Sets related.R.District appropriately.
func (o *District) AddWards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ward) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DistrictID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"wards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"district_id"}),
				strmangle.WhereClause("\"", "\"", 2, wardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DistrictID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &districtR{
			Wards: related,
		}
	} else {
		o.R.Wards = append(o.R.Wards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &wardR{
				District: o,
			}
		} else {
			rel.R.District = o
		}
	}
	return nil
}

// Districts retrieves all the records using an executor.
func Districts(mods ...qm.QueryMod) districtQuery {
	mods = append(mods, qm.From("\"districts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"districts\".*"})
	}

	return districtQuery{q}
}

// FindDistrict retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDistrict(ctx context.Context, exec boil.ContextExecutor, iD null.Int, selectCols ...string) (*District, error) {
	districtObj := &District{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"districts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, districtObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from districts")
	}

	if err = districtObj.doAfterSelectHooks(ctx, exec); err != nil {
		return districtObj, err
	}

	return districtObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *District) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no districts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(districtColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	districtInsertCacheMut.RLock()
	cache, cached := districtInsertCache[key]
	districtInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			districtAllColumns,
			districtColumnsWithDefault,
			districtColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(districtType, districtMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(districtType, districtMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"districts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"districts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into districts")
	}

	if !cached {
		districtInsertCacheMut.Lock()
		districtInsertCache[key] = cache
		districtInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the District.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *District) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	districtUpdateCacheMut.RLock()
	cache, cached := districtUpdateCache[key]
	districtUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			districtAllColumns,
			districtPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update districts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"districts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, districtPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(districtType, districtMapping, append(wl, districtPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update districts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for districts")
	}

	if !cached {
		districtUpdateCacheMut.Lock()
		districtUpdateCache[key] = cache
		districtUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q districtQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for districts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for districts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DistrictSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), districtPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"districts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, districtPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in district slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all district")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *District) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no districts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(districtColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	districtUpsertCacheMut.RLock()
	cache, cached := districtUpsertCache[key]
	districtUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			districtAllColumns,
			districtColumnsWithDefault,
			districtColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			districtAllColumns,
			districtPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert districts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(districtPrimaryKeyColumns))
			copy(conflict, districtPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"districts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(districtType, districtMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(districtType, districtMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert districts")
	}

	if !cached {
		districtUpsertCacheMut.Lock()
		districtUpsertCache[key] = cache
		districtUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single District record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *District) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no District provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), districtPrimaryKeyMapping)
	sql := "DELETE FROM \"districts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from districts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for districts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q districtQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no districtQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from districts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for districts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DistrictSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(districtBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), districtPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"districts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, districtPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from district slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for districts")
	}

	if len(districtAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *District) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDistrict(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DistrictSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DistrictSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), districtPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"districts\".* FROM \"districts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, districtPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in DistrictSlice")
	}

	*o = slice

	return nil
}

// DistrictExists checks if the District row exists.
func DistrictExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"districts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if districts exists")
	}

	return exists, nil
}

// Exists checks if the District row exists.
func (o *District) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DistrictExists(ctx, exec, o.ID)
}
