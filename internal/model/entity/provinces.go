// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Province is an object representing the database table.
type Province struct {
	ID      null.Int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    null.String `boil:"name" json:"name" toml:"name" yaml:"name"`
	GHNID   null.Int    `boil:"ghn_id" json:"ghn_id,omitempty" toml:"ghn_id" yaml:"ghn_id,omitempty"`
	GHNCode null.String `boil:"ghn_code" json:"ghn_code,omitempty" toml:"ghn_code" yaml:"ghn_code,omitempty"`

	R *provinceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L provinceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProvinceColumns = struct {
	ID      string
	Name    string
	GHNID   string
	GHNCode string
}{
	ID:      "id",
	Name:    "name",
	GHNID:   "ghn_id",
	GHNCode: "ghn_code",
}

var ProvinceTableColumns = struct {
	ID      string
	Name    string
	GHNID   string
	GHNCode string
}{
	ID:      "provinces.id",
	Name:    "provinces.name",
	GHNID:   "provinces.ghn_id",
	GHNCode: "provinces.ghn_code",
}

// Generated where

var ProvinceWhere = struct {
	ID      whereHelpernull_Int
	Name    whereHelpernull_String
	GHNID   whereHelpernull_Int
	GHNCode whereHelpernull_String
}{
	ID:      whereHelpernull_Int{field: "\"provinces\".\"id\""},
	Name:    whereHelpernull_String{field: "\"provinces\".\"name\""},
	GHNID:   whereHelpernull_Int{field: "\"provinces\".\"ghn_id\""},
	GHNCode: whereHelpernull_String{field: "\"provinces\".\"ghn_code\""},
}

// ProvinceRels is where relationship names are stored.
var ProvinceRels = struct {
}{}

// provinceR is where relationships are stored.
type provinceR struct {
}

// NewStruct creates a new relationship struct
func (*provinceR) NewStruct() *provinceR {
	return &provinceR{}
}

// provinceL is where Load methods for each relationship are stored.
type provinceL struct{}

var (
	provinceAllColumns            = []string{"id", "name", "ghn_id", "ghn_code"}
	provinceColumnsWithoutDefault = []string{"id", "name"}
	provinceColumnsWithDefault    = []string{"ghn_id", "ghn_code"}
	provincePrimaryKeyColumns     = []string{"id"}
	provinceGeneratedColumns      = []string{}
)

type (
	// ProvinceSlice is an alias for a slice of pointers to Province.
	// This should almost always be used instead of []Province.
	ProvinceSlice []*Province
	// ProvinceHook is the signature for custom Province hook methods
	ProvinceHook func(context.Context, boil.ContextExecutor, *Province) error

	provinceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	provinceType                 = reflect.TypeOf(&Province{})
	provinceMapping              = queries.MakeStructMapping(provinceType)
	provincePrimaryKeyMapping, _ = queries.BindMapping(provinceType, provinceMapping, provincePrimaryKeyColumns)
	provinceInsertCacheMut       sync.RWMutex
	provinceInsertCache          = make(map[string]insertCache)
	provinceUpdateCacheMut       sync.RWMutex
	provinceUpdateCache          = make(map[string]updateCache)
	provinceUpsertCacheMut       sync.RWMutex
	provinceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var provinceAfterSelectHooks []ProvinceHook

var provinceBeforeInsertHooks []ProvinceHook
var provinceAfterInsertHooks []ProvinceHook

var provinceBeforeUpdateHooks []ProvinceHook
var provinceAfterUpdateHooks []ProvinceHook

var provinceBeforeDeleteHooks []ProvinceHook
var provinceAfterDeleteHooks []ProvinceHook

var provinceBeforeUpsertHooks []ProvinceHook
var provinceAfterUpsertHooks []ProvinceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Province) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Province) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Province) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Province) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Province) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Province) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Province) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Province) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Province) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProvinceHook registers your hook function for all future operations.
func AddProvinceHook(hookPoint boil.HookPoint, provinceHook ProvinceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		provinceAfterSelectHooks = append(provinceAfterSelectHooks, provinceHook)
	case boil.BeforeInsertHook:
		provinceBeforeInsertHooks = append(provinceBeforeInsertHooks, provinceHook)
	case boil.AfterInsertHook:
		provinceAfterInsertHooks = append(provinceAfterInsertHooks, provinceHook)
	case boil.BeforeUpdateHook:
		provinceBeforeUpdateHooks = append(provinceBeforeUpdateHooks, provinceHook)
	case boil.AfterUpdateHook:
		provinceAfterUpdateHooks = append(provinceAfterUpdateHooks, provinceHook)
	case boil.BeforeDeleteHook:
		provinceBeforeDeleteHooks = append(provinceBeforeDeleteHooks, provinceHook)
	case boil.AfterDeleteHook:
		provinceAfterDeleteHooks = append(provinceAfterDeleteHooks, provinceHook)
	case boil.BeforeUpsertHook:
		provinceBeforeUpsertHooks = append(provinceBeforeUpsertHooks, provinceHook)
	case boil.AfterUpsertHook:
		provinceAfterUpsertHooks = append(provinceAfterUpsertHooks, provinceHook)
	}
}

// One returns a single province record from the query.
func (q provinceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Province, error) {
	o := &Province{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for provinces")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Province records from the query.
func (q provinceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProvinceSlice, error) {
	var o []*Province

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Province slice")
	}

	if len(provinceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Province records in the query.
func (q provinceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count provinces rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q provinceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if provinces exists")
	}

	return count > 0, nil
}

// Provinces retrieves all the records using an executor.
func Provinces(mods ...qm.QueryMod) provinceQuery {
	mods = append(mods, qm.From("\"provinces\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"provinces\".*"})
	}

	return provinceQuery{q}
}

// FindProvince retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProvince(ctx context.Context, exec boil.ContextExecutor, iD null.Int, selectCols ...string) (*Province, error) {
	provinceObj := &Province{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"provinces\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, provinceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from provinces")
	}

	if err = provinceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return provinceObj, err
	}

	return provinceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Province) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no provinces provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provinceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	provinceInsertCacheMut.RLock()
	cache, cached := provinceInsertCache[key]
	provinceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			provinceAllColumns,
			provinceColumnsWithDefault,
			provinceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(provinceType, provinceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(provinceType, provinceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"provinces\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"provinces\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into provinces")
	}

	if !cached {
		provinceInsertCacheMut.Lock()
		provinceInsertCache[key] = cache
		provinceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Province.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Province) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	provinceUpdateCacheMut.RLock()
	cache, cached := provinceUpdateCache[key]
	provinceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			provinceAllColumns,
			provincePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update provinces, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"provinces\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, provincePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(provinceType, provinceMapping, append(wl, provincePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update provinces row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for provinces")
	}

	if !cached {
		provinceUpdateCacheMut.Lock()
		provinceUpdateCache[key] = cache
		provinceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q provinceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for provinces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for provinces")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProvinceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provincePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"provinces\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, provincePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in province slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all province")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Province) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no provinces provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provinceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	provinceUpsertCacheMut.RLock()
	cache, cached := provinceUpsertCache[key]
	provinceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			provinceAllColumns,
			provinceColumnsWithDefault,
			provinceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			provinceAllColumns,
			provincePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert provinces, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(provincePrimaryKeyColumns))
			copy(conflict, provincePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"provinces\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(provinceType, provinceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(provinceType, provinceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert provinces")
	}

	if !cached {
		provinceUpsertCacheMut.Lock()
		provinceUpsertCache[key] = cache
		provinceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Province record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Province) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Province provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), provincePrimaryKeyMapping)
	sql := "DELETE FROM \"provinces\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from provinces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for provinces")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q provinceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no provinceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from provinces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for provinces")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProvinceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(provinceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provincePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"provinces\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, provincePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from province slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for provinces")
	}

	if len(provinceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Province) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProvince(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProvinceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProvinceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provincePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"provinces\".* FROM \"provinces\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, provincePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in ProvinceSlice")
	}

	*o = slice

	return nil
}

// ProvinceExists checks if the Province row exists.
func ProvinceExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"provinces\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if provinces exists")
	}

	return exists, nil
}

// Exists checks if the Province row exists.
func (o *Province) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProvinceExists(ctx, exec, o.ID)
}
