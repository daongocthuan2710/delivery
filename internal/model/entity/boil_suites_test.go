// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Deliveries", testDeliveries)
	t.Run("DeliveryHistories", testDeliveryHistories)
	t.Run("Districts", testDistricts)
	t.Run("Provinces", testProvinces)
	t.Run("Wards", testWards)
}

func TestDelete(t *testing.T) {
	t.Run("Deliveries", testDeliveriesDelete)
	t.Run("DeliveryHistories", testDeliveryHistoriesDelete)
	t.Run("Districts", testDistrictsDelete)
	t.Run("Provinces", testProvincesDelete)
	t.Run("Wards", testWardsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Deliveries", testDeliveriesQueryDeleteAll)
	t.Run("DeliveryHistories", testDeliveryHistoriesQueryDeleteAll)
	t.Run("Districts", testDistrictsQueryDeleteAll)
	t.Run("Provinces", testProvincesQueryDeleteAll)
	t.Run("Wards", testWardsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Deliveries", testDeliveriesSliceDeleteAll)
	t.Run("DeliveryHistories", testDeliveryHistoriesSliceDeleteAll)
	t.Run("Districts", testDistrictsSliceDeleteAll)
	t.Run("Provinces", testProvincesSliceDeleteAll)
	t.Run("Wards", testWardsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Deliveries", testDeliveriesExists)
	t.Run("DeliveryHistories", testDeliveryHistoriesExists)
	t.Run("Districts", testDistrictsExists)
	t.Run("Provinces", testProvincesExists)
	t.Run("Wards", testWardsExists)
}

func TestFind(t *testing.T) {
	t.Run("Deliveries", testDeliveriesFind)
	t.Run("DeliveryHistories", testDeliveryHistoriesFind)
	t.Run("Districts", testDistrictsFind)
	t.Run("Provinces", testProvincesFind)
	t.Run("Wards", testWardsFind)
}

func TestBind(t *testing.T) {
	t.Run("Deliveries", testDeliveriesBind)
	t.Run("DeliveryHistories", testDeliveryHistoriesBind)
	t.Run("Districts", testDistrictsBind)
	t.Run("Provinces", testProvincesBind)
	t.Run("Wards", testWardsBind)
}

func TestOne(t *testing.T) {
	t.Run("Deliveries", testDeliveriesOne)
	t.Run("DeliveryHistories", testDeliveryHistoriesOne)
	t.Run("Districts", testDistrictsOne)
	t.Run("Provinces", testProvincesOne)
	t.Run("Wards", testWardsOne)
}

func TestAll(t *testing.T) {
	t.Run("Deliveries", testDeliveriesAll)
	t.Run("DeliveryHistories", testDeliveryHistoriesAll)
	t.Run("Districts", testDistrictsAll)
	t.Run("Provinces", testProvincesAll)
	t.Run("Wards", testWardsAll)
}

func TestCount(t *testing.T) {
	t.Run("Deliveries", testDeliveriesCount)
	t.Run("DeliveryHistories", testDeliveryHistoriesCount)
	t.Run("Districts", testDistrictsCount)
	t.Run("Provinces", testProvincesCount)
	t.Run("Wards", testWardsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Deliveries", testDeliveriesHooks)
	t.Run("DeliveryHistories", testDeliveryHistoriesHooks)
	t.Run("Districts", testDistrictsHooks)
	t.Run("Provinces", testProvincesHooks)
	t.Run("Wards", testWardsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Deliveries", testDeliveriesInsert)
	t.Run("Deliveries", testDeliveriesInsertWhitelist)
	t.Run("DeliveryHistories", testDeliveryHistoriesInsert)
	t.Run("DeliveryHistories", testDeliveryHistoriesInsertWhitelist)
	t.Run("Districts", testDistrictsInsert)
	t.Run("Districts", testDistrictsInsertWhitelist)
	t.Run("Provinces", testProvincesInsert)
	t.Run("Provinces", testProvincesInsertWhitelist)
	t.Run("Wards", testWardsInsert)
	t.Run("Wards", testWardsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DeliveryHistoryToDeliveryUsingDelivery", testDeliveryHistoryToOneDeliveryUsingDelivery)
	t.Run("DistrictToProvinceUsingProvince", testDistrictToOneProvinceUsingProvince)
	t.Run("WardToDistrictUsingDistrict", testWardToOneDistrictUsingDistrict)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DeliveryToDeliveryHistories", testDeliveryToManyDeliveryHistories)
	t.Run("DistrictToWards", testDistrictToManyWards)
	t.Run("ProvinceToDistricts", testProvinceToManyDistricts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DeliveryHistoryToDeliveryUsingDeliveryHistories", testDeliveryHistoryToOneSetOpDeliveryUsingDelivery)
	t.Run("DistrictToProvinceUsingDistricts", testDistrictToOneSetOpProvinceUsingProvince)
	t.Run("WardToDistrictUsingWards", testWardToOneSetOpDistrictUsingDistrict)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DeliveryToDeliveryHistories", testDeliveryToManyAddOpDeliveryHistories)
	t.Run("DistrictToWards", testDistrictToManyAddOpWards)
	t.Run("ProvinceToDistricts", testProvinceToManyAddOpDistricts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Deliveries", testDeliveriesReload)
	t.Run("DeliveryHistories", testDeliveryHistoriesReload)
	t.Run("Districts", testDistrictsReload)
	t.Run("Provinces", testProvincesReload)
	t.Run("Wards", testWardsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Deliveries", testDeliveriesReloadAll)
	t.Run("DeliveryHistories", testDeliveryHistoriesReloadAll)
	t.Run("Districts", testDistrictsReloadAll)
	t.Run("Provinces", testProvincesReloadAll)
	t.Run("Wards", testWardsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Deliveries", testDeliveriesSelect)
	t.Run("DeliveryHistories", testDeliveryHistoriesSelect)
	t.Run("Districts", testDistrictsSelect)
	t.Run("Provinces", testProvincesSelect)
	t.Run("Wards", testWardsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Deliveries", testDeliveriesUpdate)
	t.Run("DeliveryHistories", testDeliveryHistoriesUpdate)
	t.Run("Districts", testDistrictsUpdate)
	t.Run("Provinces", testProvincesUpdate)
	t.Run("Wards", testWardsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Deliveries", testDeliveriesSliceUpdateAll)
	t.Run("DeliveryHistories", testDeliveryHistoriesSliceUpdateAll)
	t.Run("Districts", testDistrictsSliceUpdateAll)
	t.Run("Provinces", testProvincesSliceUpdateAll)
	t.Run("Wards", testWardsSliceUpdateAll)
}
