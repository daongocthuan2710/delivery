// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeliveries(t *testing.T) {
	t.Parallel()

	query := Deliveries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeliveriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Deliveries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeliverySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliveriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeliveryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Delivery exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeliveryExists to return true, but got false.")
	}
}

func testDeliveriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deliveryFound, err := FindDelivery(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deliveryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeliveriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Deliveries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeliveriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Deliveries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeliveriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deliveryOne := &Delivery{}
	deliveryTwo := &Delivery{}
	if err = randomize.Struct(seed, deliveryOne, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}
	if err = randomize.Struct(seed, deliveryTwo, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deliveryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deliveryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Deliveries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeliveriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deliveryOne := &Delivery{}
	deliveryTwo := &Delivery{}
	if err = randomize.Struct(seed, deliveryOne, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}
	if err = randomize.Struct(seed, deliveryTwo, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deliveryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deliveryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deliveryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func deliveryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func deliveryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func deliveryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func deliveryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func deliveryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func deliveryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func deliveryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func deliveryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
	*o = Delivery{}
	return nil
}

func testDeliveriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Delivery{}
	o := &Delivery{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deliveryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Delivery object: %s", err)
	}

	AddDeliveryHook(boil.BeforeInsertHook, deliveryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deliveryBeforeInsertHooks = []DeliveryHook{}

	AddDeliveryHook(boil.AfterInsertHook, deliveryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deliveryAfterInsertHooks = []DeliveryHook{}

	AddDeliveryHook(boil.AfterSelectHook, deliveryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deliveryAfterSelectHooks = []DeliveryHook{}

	AddDeliveryHook(boil.BeforeUpdateHook, deliveryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deliveryBeforeUpdateHooks = []DeliveryHook{}

	AddDeliveryHook(boil.AfterUpdateHook, deliveryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deliveryAfterUpdateHooks = []DeliveryHook{}

	AddDeliveryHook(boil.BeforeDeleteHook, deliveryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deliveryBeforeDeleteHooks = []DeliveryHook{}

	AddDeliveryHook(boil.AfterDeleteHook, deliveryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deliveryAfterDeleteHooks = []DeliveryHook{}

	AddDeliveryHook(boil.BeforeUpsertHook, deliveryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deliveryBeforeUpsertHooks = []DeliveryHook{}

	AddDeliveryHook(boil.AfterUpsertHook, deliveryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deliveryAfterUpsertHooks = []DeliveryHook{}
}

func testDeliveriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeliveriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deliveryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeliveryToManyDeliveryHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Delivery
	var b, c DeliveryHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, deliveryHistoryDBTypes, false, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deliveryHistoryDBTypes, false, deliveryHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DeliveryID, a.ID)
	queries.Assign(&c.DeliveryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeliveryHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DeliveryID, b.DeliveryID) {
			bFound = true
		}
		if queries.Equal(v.DeliveryID, c.DeliveryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DeliverySlice{&a}
	if err = a.L.LoadDeliveryHistories(ctx, tx, false, (*[]*Delivery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeliveryHistories = nil
	if err = a.L.LoadDeliveryHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDeliveryToManyAddOpDeliveryHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Delivery
	var b, c, d, e DeliveryHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DeliveryHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryHistoryDBTypes, false, strmangle.SetComplement(deliveryHistoryPrimaryKeyColumns, deliveryHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DeliveryHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeliveryHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DeliveryID) {
			t.Error("foreign key was wrong value", a.ID, first.DeliveryID)
		}
		if !queries.Equal(a.ID, second.DeliveryID) {
			t.Error("foreign key was wrong value", a.ID, second.DeliveryID)
		}

		if first.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeliveryHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeliveryHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeliveryHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDeliveriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeliveriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeliverySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeliveriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Deliveries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deliveryDBTypes = map[string]string{`ID`: `text`, `Code`: `text`, `TrackingCode`: `text`, `Note`: `text`, `Status`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Value`: `bigint`, `Cod`: `bigint`, `Weight`: `bigint`, `ServiceCode`: `text`, `PartnerStatus`: `text`, `PartnerIdentityCode`: `text`, `FromName`: `text`, `FromPhone`: `text`, `FromAddress`: `text`, `FromProvinceCode`: `integer`, `FromDistrictCode`: `integer`, `FromWardCode`: `integer`, `ToName`: `text`, `ToPhone`: `text`, `ToAddress`: `text`, `ToProvinceCode`: `integer`, `ToDistrictCode`: `integer`, `ToWardCode`: `integer`, `TotalFee`: `bigint`}
	_               = bytes.MinRead
)

func testDeliveriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deliveryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deliveryAllColumns) == len(deliveryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeliveriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deliveryAllColumns) == len(deliveryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Delivery{}
	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deliveryDBTypes, true, deliveryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deliveryAllColumns, deliveryPrimaryKeyColumns) {
		fields = deliveryAllColumns
	} else {
		fields = strmangle.SetComplement(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeliverySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeliveriesUpsert(t *testing.T) {
	t.Parallel()

	if len(deliveryAllColumns) == len(deliveryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Delivery{}
	if err = randomize.Struct(seed, &o, deliveryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Delivery: %s", err)
	}

	count, err := Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deliveryDBTypes, false, deliveryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Delivery: %s", err)
	}

	count, err = Deliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
